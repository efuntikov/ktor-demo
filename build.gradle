buildscript {
    repositories {
        jcenter()
    }
    
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }

    def localProperties = new Properties()
    localProperties.load(new FileInputStream(rootProject.file("local.properties")))
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.9.0"
    id 'application'
    id "org.jetbrains.kotlin.plugin.serialization" version "1.9.0"
    id "io.ktor.plugin" version "2.3.3"
}

group 'com.efuntikov'
version '0.0.1'
mainClassName = "io.ktor.server.netty.EngineMain"

sourceSets {
    main.kotlin.srcDirs = main.java.srcDirs = ['src']
    test.kotlin.srcDirs = test.java.srcDirs = ['test']
    main.resources.srcDirs = ['resources']
    test.resources.srcDirs = ['testresources']
}

repositories {
    mavenLocal()
    jcenter()
    maven { url 'https://kotlin.bintray.com/ktor' }
}

ktor {
    docker {
        jreVersion.set(io.ktor.plugin.features.JreVersion.JRE_17)
        localImageName.set("sample-docker-image")
        imageTag.set("0.0.1-preview")
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.9.0"

    implementation "io.ktor:ktor-client-okhttp:$ktor_version"
    implementation "io.ktor:ktor-client-logging:$ktor_version"
    implementation "io.ktor:ktor-client-content-negotiation:$ktor_version"
    implementation "io.ktor:ktor-client-core:$ktor_version"
    implementation "io.ktor:ktor-client-websockets:$ktor_version"

    implementation "ch.qos.logback:logback-classic:$logback_version"

    implementation "io.ktor:ktor-server-netty:$ktor_version"
//    implementation "io.ktor:ktor-server-core:$ktor_version"
    implementation "io.ktor:ktor-server-content-negotiation:$ktor_version"

    implementation "io.ktor:ktor-serialization-kotlinx-json:$ktor_version"
    testImplementation "io.ktor:ktor-server-tests:$ktor_version"
}
